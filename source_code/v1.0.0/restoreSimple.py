import os
import json
import shutil
import copy
import time
import random
import string


ver_control = 0
software_name = 0
creator = 0
def globalVariable(ver="v1.0.0", soft_name="Project Ultra Backup", author="Anjal.P"):
    global ver_control, software_name, creator 
    ver_control = ver
    software_name = soft_name
    creator = author
    return ver_control, software_name, creator


def errorSave(where_to_save, error_report, root_directory):
    global error
    where_to_save = where_to_save + "//"
    print("Error::")
    print("look at: ", where_to_save + "Error Report UB.txt")
    ver_control, software_name, creator = globalVariable()
    date_error = str(time.localtime(time.time()).tm_mday) + "." + str(time.localtime(time.time()).tm_mon) + "." + str(time.localtime(time.time()).tm_year)
    if os.path.exists(where_to_save + "Error Report UB.txt")==False:
        try:
            with open(where_to_save + "Error Report UB.txt", 'a') as error_file:
                error_file.write("--"*50 + "\n")
                error_file.write("On Running Restore: " + root_directory + "\n")
                error_file.write("Created On: " + date_error + "\n")
                error_file.write("Report: \n")
                for eachError in error_report:
                    error_file.write("     > " + eachError + " " + error_report[eachError] + "\n")
                error_file.write("This is an automated report generated by " + str(software_name) + " " + str(ver_control) + " " + "Author: " + str(creator) + "\n")
                error_file.write("--"*50 + "\n")
                error_file.close()
        except Exception as e:
            print("Error even creating the error log .txt at: " + where_to_save + "Error Report UB.txt")
            print("Error Report: " + str(error_report))
            print("Error on errorSave: " + str(e))
    else:
        try:
            with open(where_to_save + "Error Report UB.txt", 'a') as error_file:
                error_file.write("--"*50 + "\n")
                error_file.write("On Running Backup: " + root_directory + "\n")
                error_file.write("Created On: " + date_error + "\n")
                error_file.write("Report: \n")
                for eachError in error_report:
                    error_file.write("     > " + eachError + " " + error_report[eachError] + "\n")
                error_file.write("This is an automated report generated by " + str(software_name) + " " + str(ver_control) + " " + "Author: " + str(creator) + "\n")
                error_file.write("--"*50 + "\n")
                error_file.close()
        except:
            print("Error even creating the error log .txt at: " + where_to_save + "Error Report UB.txt")
            print("Error Report: " + str(error_report))
            print("Error on errorSave: " + str(e))
    return


def restoreSimpleBackup(backup_folder, restore_folder, folder_restore):
    folder_det = {}
    ubs_attendence = 0
    errorReport = {}
    if backup_folder.find("\\")!=-1 or restore_folder.find("\\")!=-1:
        backup_folder = backup_folder.replace("\\", "//")
        restore_folder = restore_folder.replace("\\", "//")
    if os.path.isdir(backup_folder)==False:
        print("Error, No such folder found: " + backup_folder)
        return
    if os.path.isdir(restore_folder)==False:
        print("Error, No such folder found: " + restore_folder)
        return
    if os.path.isdir(backup_folder + "//" + folder_restore)==False:
        print("Error, no such folder named: " + folder_restore + " to backup")
        return
    else:
        ubsfile = os.listdir(backup_folder + "//" + folder_restore + "//")
        for eachfile in ubsfile:
            if eachfile[:3]=="UB_" and eachfile[-4:]==".UBs":
                ubs_attendence = 1
                try:
                    with open(backup_folder + "//" + folder_restore + "//" + eachfile, 'r') as fileUBs:
                        folder_det = json.load(fileUBs)
                        fileUBs.close()
                except Exception as e:
                    errorReport["er_open_UBs"] = backup_folder + "//" + folder_restore + "//" + eachfile, 'r'
                    errorReport["Exception: "] = str(e)
                    errorSave(restore_folder, errorReport, backup_folder)
                    return
        if ubs_attendence==0:
            print("No backup can be found in the selected directory")
            return
        else:
            for eachFolder in folder_det:
                if os.path.isdir(backup_folder + "//" + eachFolder)==True:
                    if os.path.isdir(restore_folder + "//" + eachFolder + "//")==False:
                        try:
                            os.makedirs(restore_folder + "//" + eachFolder + "//")
                        except Exception as e:
                            errorReport["er_create_folder: "] = restore_folder + "//" + eachFolder + "//"
                            errorReport["Exception: "] = str(e)
                            errorSave(restore_folder, errorReport, backup_folder)
                    for restFile in folder_det[eachFolder]["fi_s"]:
                        if os.path.isfile(backup_folder + "//" + eachFolder + "//" + folder_det[eachFolder]["fi_s"][restFile])==True:
                            try: 
                                shutil.copy(backup_folder + "//" + eachFolder + "//" + folder_det[eachFolder]["fi_s"][restFile], restore_folder + "//" + eachFolder + "//" + folder_det[eachFolder]["fi_s"][restFile])
                                shutil.copystat(backup_folder + "//" + eachFolder + "//" + folder_det[eachFolder]["fi_s"][restFile], restore_folder + "//" + eachFolder + "//" + folder_det[eachFolder]["fi_s"][restFile])
                            except Exception as e:
                                errorReport["er_copying_to: "] = backup_folder + "//" + eachFolder + "//" + folder_det[eachFolder]["fi_s"][restFile] + " to " + restore_folder + "//" + eachFolder + "//" + folder_det[eachFolder]["fi_s"][restFile]
                                errorReport["Exception: "] = str(e)
                                errorSave(restore_folder, errorReport, backup_folder)
                            print(".", end='', flush=True) 
                        else:
                            print("Error,File: " + backup_folder + "//" + eachFolder + "//" + folder_det[eachFolder]["fi_s"][restFile] + " in the UBs cannot be located in the Backup Directory")
                            print("This file cannot be restored")
                else:
                    print("The Folder: " + eachFolder + " is not present in the backup directory")
                    print("Hence cannot be restored.")
    return


if __name__=="__main__":
    print("Checked OK")
    print("This code do not run solo, try importing it, this code os a part of the Project Ultra Backup.")