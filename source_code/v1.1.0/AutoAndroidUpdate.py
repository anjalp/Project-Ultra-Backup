from ftplib import FTP
import os
import time
from dateutil import parser
import datetime
import json
import copy
import random
import string


ver_control = 0
software_name = 0
creator = 0
def globalVariable(ver="v1.1.0", soft_name="Project Ultra Backup", author="Anjal.P"):
    global ver_control, software_name, creator 
    ver_control = ver
    software_name = soft_name
    creator = author
    return ver_control, software_name, creator


def errorSave(where_to_save, error_report, root_directory):
    where_to_save = where_to_save + "//"
    print("Error::")
    print("look at: ", where_to_save + "Error Report UB.txt")
    ver_control, software_name, creator = globalVariable()
    date_error = str(time.localtime(time.time()).tm_mday) + "." + str(time.localtime(time.time()).tm_mon) + "." + str(time.localtime(time.time()).tm_year)
    if os.path.exists(where_to_save + "Error Report UB.txt")==False:
        try:
            with open(where_to_save + "Error Report UB.txt", 'a') as error_file:
                error_file.write("--"*50 + "\n")
                error_file.write("On Running Restore: " + root_directory + "\n")
                error_file.write("Created On: " + date_error + "\n")
                error_file.write("Report: \n")
                for eachError in error_report:
                    error_file.write("     > " + eachError + " " + error_report[eachError] + "\n")
                error_file.write("This is an automated report generated by " + str(software_name) + " " + str(ver_control) + " " + "Author: " + str(creator) + "\n")
                error_file.write("--"*50 + "\n")
                error_file.close()
        except Exception as e:
            print("Error even creating the error log .txt at: " + where_to_save + "Error Report UB.txt")
            print("Error Report: " + str(error_report))
            print("Error on errorSave: " + str(e))
    else:
        try:
            with open(where_to_save + "Error Report UB.txt", 'a') as error_file:
                error_file.write("--"*50 + "\n")
                error_file.write("On Running Backup: " + root_directory + "\n")
                error_file.write("Created On: " + date_error + "\n")
                error_file.write("Report: \n")
                for eachError in error_report:
                    error_file.write("     > " + eachError + " " + error_report[eachError] + "\n")
                error_file.write("This is an automated report generated by " + str(software_name) + " " + str(ver_control) + " " + "Author: " + str(creator) + "\n")
                error_file.write("--"*50 + "\n")
                error_file.close()
        except:
            print("Error even creating the error log .txt at: " + where_to_save + "Error Report UB.txt")
            print("Error Report: " + str(error_report))
            print("Error on errorSave: " + str(e))
    return


def updateEngine(mapFTP, backup_to, backup_folder):
    previousBackup = {}
    prevUB = {}
    mapModFTP = {}
    variety = 0
    errorReport = {}
    basename = backup_folder.replace("/storage/", '')
    mapModFTP = copy.deepcopy(mapFTP)
    if basename.find("emulated/0")!=-1:
        basename = basename.replace("emulated/0", "Internal Storage")
    if basename.find("/")!=-1:
        basename = basename.replace("/", "//")
    for folder, subfolder, files in os.walk(backup_to):
        for eachfile in files:
            if eachfile[:3]=='UB_' and eachfile[-6:]=='.ftpUB':
                if folder.replace("\\", "//").find(basename)!=-1:
                    previousBackup[folder.replace("\\", "//") + "//" + str(variety)] = eachfile
                    variety += 1           
    if len(previousBackup) > 0:
        print("Found some previous backup....")
        for eachUBfiles in previousBackup:
            print("   --" + eachUBfiles.replace( "//" + str(eachUBfiles.split("//")[-1]), '') + "//" + previousBackup[eachUBfiles])
            try:
                with open(eachUBfiles.replace( "//" + str(eachUBfiles.split("//")[-1]), '') + "//" + previousBackup[eachUBfiles], 'r') as ubfile:
                    prevUB[previousBackup[eachUBfiles]] = json.load(ubfile)
                    ubfile.close()
            except Exception as e:
                errorReport["er_open_ftpUB"] = eachUBfiles.replace( "//" + str(eachUBfiles.split("//")[-1]), '') + "//" + previousBackup[eachUBfiles]
                errorReport["Exception: "] = str(e)
                errorSave(backup_to, errorReport, backup_to)  
        if len(prevUB)!=0:
            for prevUBfiles in prevUB:
                for eachfolder in prevUB[prevUBfiles]:
                    if eachfolder in mapFTP.keys():
                        for prevfile in prevUB[prevUBfiles][eachfolder]:
                            for newfiles in mapFTP[eachfolder]:
                                if prevUB[prevUBfiles][eachfolder][prevfile][0]==mapFTP[eachfolder][newfiles][0] and prevUB[prevUBfiles][eachfolder][prevfile][1]==mapFTP[eachfolder][newfiles][1] and prevUB[prevUBfiles][eachfolder][prevfile][2]==mapFTP[eachfolder][newfiles][2]:
                                    mapModFTP[eachfolder].pop(newfiles)
    else:
        print("No backup record found......")
        print("Creating a fresh backup...")
    return mapModFTP


def autoUpdate(ftpAdress, port, userName, password, backup_to, backup_folder, backupUnit):
    connStatus = 'no'    
    mapFTP = {}    
    noFolder = 0     
    fileCount = 0
    loop = True
    ftp = FTP()
    numFiles = 0
    numFolder = 0
    errorReport = {}
    todayDate  =str(time.localtime(time.time()).tm_mday) + "." + str(time.localtime(time.time()).tm_mon) + "." + str(time.localtime(time.time()).tm_year)
    if backup_to.find("\\")!=-1:
        backup_to.replace("\\", "//")
    if os.path.isdir(backup_to)==False:
        print("No such folder found: " + backup_to)
        print("Reconfigure the Auto Android Settings")
        return
    try:
        ftp.connect(ftpAdress, port, 8)  
    except Exception as e:
        print("Did you turn off the FTP Server or WiFi, something went wrong")
        errorReport["er_connect: "] = "Adress: " + ftpAdress + " port: " + port + " timeout: " + str(8) 
        errorReport["Exception: "] = str(e)
        errorSave(backup_to, errorReport, ftpConnect)
        return
    try:
        ftp.login(userName, password)
    except Exception as e:
        print("Some Error in FTP login function......")
        errorReport["er_login: "] = "Username: " + userName + " password: " + password
        errorReport["Exception: "] = str(e)
        errorSave(backup_to, errorReport, ftplogin)
        return
    connStatus = 'ok'
    
    if connStatus=='ok':
        os.system('cls')
        ftp.cwd("/storage")
        print("   ----------------------------Android FTP Automated Backup---------------------------\n")
        print("\nBackup Name: " + backupUnit)
        print("\nYou choose: " + backup_folder + ", to backup")
        print("Mapping the folder........")
        mainloc = backup_folder.replace("/storage/", "")  
        loc = mainloc
        mapFTP[mainloc] = {}
        while loop==True:
            noFolder = 0
            fileCount = 0
            try:
                ftp.cwd(loc)       
            except Exception as e:
                errorReport["er_back_..:"] = "from: " + loc
                errorReport["Exception: "] = str(e)
                errorSave(backup_to, errorReport, loc)
            files = []
            try:
                ftp.dir(files.append)
            except Exception as e:
                errorReport["er_dir: "] = loc
                errorReport["Exception: "] = str(e)
                errorSave(backup_to, errorReport, loc)
            gth = len(loc.split("/"))    
            for x in range(0, gth, 1):
                try:
                    ftp.cwd('..')
                except Exception as e:
                    errorReport["er_back_..:"] = "from: " + loc
                    errorReport["Exception: "] = str(e)
                    errorSave(backup_to, errorReport, loc)
            for f in files:    
                if (f[52:])[0]!='.':
                    if loc + "/" + f[52:] in mapFTP:
                        continue
                    elif f[0]=='d':
                        mapFTP[loc + "/" + f[52:]] = {}
                        noFolder = 1
                        loc = loc + "/" + f[52:]
                        break
                    elif f[0]=='-':
                        mapFTP[loc][fileCount] = []   
                        size = f.split()[4]
                        datestr = ' '.join(f.split()[5:8])  
                        dateI = parser.parse(datestr)    
                        dateIe = int(dateI.timestamp())   
                        mapFTP[loc][fileCount].append(f[52:])
                        mapFTP[loc][fileCount].append(size)
                        mapFTP[loc][fileCount].append(dateIe)
                        fileCount += 1
            if noFolder==0:
                xloc = loc.split("/")
                newLoc = ''
                xloc.pop()
                for each in xloc:
                    if newLoc=='':
                        newLoc = each
                    else:
                        newLoc = newLoc + "/" + each
                loc = newLoc
            if len(loc) < len(mainloc):
                loop = False
        print("Mapping Completed......")
        try:
            mapFTP = updateEngine(mapFTP, backup_to, backup_folder) 
        except Exception as e:
            print("Update Engine failed.. Update not possible")
            errorReport["er_updateEngine: "] = 'updateEngine'
            errorReport["Exception: "] = str(e)
            errorSave("C://temp", errorReport, 'ENGINE')
            return
        numFolder = 0
        numFiles = 0
        for countFolder in mapFTP:
            numFolder += 1
            for countFiles in mapFTP[countFolder]:
                numFiles += 1
        print("Contains: " + str(numFiles) + " new files and to update")
        if numFiles!=0 or numFolder!=0:
            if os.path.isdir(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate)==False:
                try: 
                    os.makedirs(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate)
                except Exception as e:
                    print("Gross Error, in creating the backup folder: " + backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate)
                    errorReport["er_create_directory: "] = backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate
                    errorReport["Exception: "] = str(e)
                    errorReport["Plan of action: "] = "Please choose another backup folder."
                    errorSave(backup_to, errorReport, backup_to)
                    return
            for eachFolder in mapFTP:
                if eachFolder.find('emulated/0')!=-1:
                    folderPC = eachFolder.replace("emulated/0", 'Internal Storage')
                else:
                    folderPC = eachFolder
                if folderPC.find("/")!=-1:
                    folderPC = folderPC.replace("/", "//")
                try:
                    if os.path.isdir(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC)==False:
                        os.makedirs(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC)
                except Exception as e:
                    print("Error creating directory in: " + backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC)
                    errorReport["er_create_directory: "] = backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC
                    errorReport["Exception: "] = str(e)
                    errorSave(backup_to, errorReport, backup_to)
                newFolder = ''   
                for shortLoc in folderPC.split("/"):
                    if len(shortLoc) > 30:
                        newloc = shortLoc[:27] + ".."
                    else:
                        newLoc = shortLoc
                    if newFolder=='':
                        newFolder = newLoc
                    else:
                        newFolder  = newFolder + "/" + newLoc
                folderPC = newFolder
                try:
                    ftp.cwd("/storage/" + eachFolder)
                except Exception as e:
                    errorReport["er_cwd: "] = "/storage/" + eachFolder
                    errorReport["Exception: "] = str(e)
                    errorSave(backup_to, errorReport, eachFolder)
                for eachFile in mapFTP[eachFolder]:
                    if len(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC + "//" + mapFTP[eachFolder][eachFile][0]) > 250:
                        x = mapFTP[eachFolder][eachFile][0].split(".")   
                        file = ''
                        for joinFile in x[:-1]:
                            if file=='':
                                file = joinFile
                            else:
                                file = file + "." + joinFile
                        if len(file) > 40:
                            file = file[:37] + ".."
                        filename = file + "." + x[-1]
                        if len(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC + "//" + filename) > 250:
                            try:
                                with open(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC + "//" + filename, 'wb') as fileWrite:
                                    try: 
                                        ftp.retrbinary('RETR %s' % mapFTP[eachFolder][eachFile][0], fileWrite.write)
                                        print("  File Name Altered: " + mapFTP[eachFolder][eachFile][0] + " to " + filename)
                                        fileWrite.close()
                                    except Exception as e:
                                        fileWrite.close()
                                        errorReport["er_download_files: "] = eachFolder + "/" + mapFTP[eachFolder][eachFile][0]
                                        errorReport["Exception: "] = str(e)
                                        errorSave(backup_to, errorReport, eachFolder)
                            except Exception as e:
                                errorReport["er_create_file: "] = backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC + "//" + filename
                                errorReport["Exception: "] = str(e)
                                errorSave(backup_to, errorReport, backup_to)
                        else:
                            print("\nSorry, the file: " + eachFolder + "/" + mapFTP[eachFolder][eachFile][0] + " cannot be downloaded: Long file name\n")
                            errorReport["er_saving_file: "] = eachFolder + "/" + mapFTP[eachFolder][eachFile][0]
                            errorReport["Exception: "] = "Since Windows OS only allows 260 charactor of complete file location., this has exceeded the limit."
                            errorReport["Plan of action: "] = "Try renaming the file or file location with a much shoter name."
                            errorSave(backup_to, errorReport, eachFolder)
                    else:
                        try: 
                            with open(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC + "//" + mapFTP[eachFolder][eachFile][0], 'wb') as fileWrite:
                                try: 
                                    ftp.retrbinary('RETR %s' % mapFTP[eachFolder][eachFile][0], fileWrite.write)
                                    print("  --" + mapFTP[eachFolder][eachFile][0])
                                    fileWrite.close()
                                except Exception as e:
                                    fileWrite.close()
                                    errorReport["er_downalod_files: "] = eachFolder + "/" + mapFTP[eachFolder][eachFile][0]
                                    errorReport["Exception: "] = str(e)
                                    errorSave(backup_to, errorReport, eachFolder)
                        except Exception as e:
                            errorReport["er_create_file: "] = backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + folderPC + "//" + mapFTP[eachFolder][eachFile][0]
                            errorReport["Exception: "] = str(e)
                            errorSave(backup_to, errorReport, backup_folder)
            if numFiles!=0:
                print("Update Successful........")
                print("Saving the mapFile to backup directory.....")
                ubfilename = backup_folder.replace("/storage/", '')
                if ubfilename.find("emulated/0")!=-1:
                    ubfilename = ubfilename.replace("emulated/0", "Internal Storage")
                ubfilename = ubfilename.replace("/", "//")
                basename = backup_folder.split("/")[-1]
                randName = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
                try:   
                    with open(backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + ubfilename + "//" + "UB_" + randName + "_" + basename + ".ftpUB", 'w') as fileUB:
                        json.dump(mapFTP, fileUB)
                        fileUB.close()
                except Exception as e:
                    errorReport["er_create_.ftpUB"] = backup_to + "//" + "AndroidUB" + "//" + "UB_" + todayDate + "//" + ubfilename + "//" + "UB_" + randName + "_" + basename + ".ftpUB"
                    errorReport["Exception: "] = str(e)
                    errorSave(backup_to, errorReport, backup_folder)
        elif numFiles==0 and numFolder==0:
            print("No need for a Update......")
        ftp.cwd(backup_folder)
        mapFTP.clear()
        ftp.quit()
    else:
        print("Sorry the device is not connected, Backup terminated.....")
    return


def connectionStillPresent(ftpAdress, port, userName, password):
    ftp = FTP()
    try:
        ftp.connect(ftpAdress, port, 8)  
        ftp.login(userName, password)
        ftp.quit()
        return True
    except:
        return False


errorReport = {}
rootDir = os.getcwd()
connection = True
if os.path.isfile("C://ProgramData//Ultra Backup//backUPThis.bu")==True:
    with open("C://ProgramData//Ultra Backup//backUPThis.bu", 'r') as backupfile:
        data = json.load(backupfile)
        backupfile.close()
    for eachBackupUnit in data:
        user = eachBackupUnit
        for eachFolder in data[eachBackupUnit]['folderBackup']:
            try:
                autoUpdate(data[eachBackupUnit]['adress'], data[eachBackupUnit]['port'], data[eachBackupUnit]['username'], data[eachBackupUnit]['password'], data[eachBackupUnit]['backupDir'], data[eachBackupUnit]['folderBackup'][eachFolder], eachBackupUnit)
            except Exception as e:
                errorReport["er_autoUpdare"] = str(eachBackupUnit) + ", " + str(data[eachBackupUnit]['adress']) + ", " + str(data[eachBackupUnit]['port']) + ", " + str(data[eachBackupUnit]['username']) + ", " + str(data[eachBackupUnit]['password']) + ", " + str(data[eachBackupUnit]['folderBackup'][eachFolder])
                errorReport["Exception: "] = str(e)
                errorSave("C://temp", errorReport, 'autoUpdate')
    while connection==True:
        print("Please Exit the FTP Server to Quit the Android Auto Backup Wizard")
        time.sleep(5)
        connection = connectionStillPresent(data[user]['adress'], data[user]['port'], data[user]['username'], data[user]['password'])
    try:
        os.remove("C://ProgramData//Ultra Backup//backUPThis.bu")
    except Exception as e:
        print("Please Try to delete the file: " + "C://ProgramData//Ultra Backup//backUPThis.bu, as we were")
        print("not able to delete it. This is crucial for the autoBackup Process and restart your PC.")
        errorReport["er_remove_.bu"] = "C://ProgramData//Ultra Backup//backUPThis.bu"
        errorReport["Exception: "] = str(e)
        errorSave("C://temp", errorReport, 'C://ProgramData//Ultra Backup//backUPThis.bu')
        input("Press enter to continue")
    try:
        os.startfile(rootDir + "//ubAutoRedar.exe")
    except Exception as e:
        print("Please go to the location and double click the file: " + os.getcwd() + "//ubAutoRedar.exe")
        errorReport["er_run"] = "ubAutoRedar"
        errorReport["Exception: "] = str(e)
        errorSave("C://temp", errorReport, os.getcwd())
        input("Press enter to continue")
exit()