import os
import time
import json
from cryptography.fernet import Fernet as fn


ver_control = 0
software_name = 0
creator = 0
def globalVariable(ver="v1.1.0", soft_name="Project Ultra Backup", author="Anjal.P"):
    global ver_control, software_name, creator 
    ver_control = ver
    software_name = soft_name
    creator = author
    return ver_control, software_name, creator


def errorSave(where_to_save, error_report, root_directory):
    where_to_save = where_to_save + "//"
    print("Error::")
    print("look at: ", where_to_save + "Error Report UB.txt")
    ver_control, software_name, creator = globalVariable()
    date_error = str(time.localtime(time.time()).tm_mday) + "." + str(time.localtime(time.time()).tm_mon) + "." + str(time.localtime(time.time()).tm_year)
    if os.path.exists(where_to_save + "Error Report UB.txt")==False:
        try:
            with open(where_to_save + "Error Report UB.txt", 'a') as error_file:
                error_file.write("--"*50 + "\n")
                error_file.write("On Running Restore: " + root_directory + "\n")
                error_file.write("Created On: " + date_error + "\n")
                error_file.write("Report: \n")
                for eachError in error_report:
                    error_file.write("     > " + eachError + " " + error_report[eachError] + "\n")
                error_file.write("This is an automated report generated by " + str(software_name) + " " + str(ver_control) + " " + "Author: " + str(creator) + "\n")
                error_file.write("--"*50 + "\n")
                error_file.close()
        except Exception as e:
            print("Error even creating the error log .txt at: " + where_to_save + "Error Report UB.txt")
            print("Error Report: " + str(error_report))
            print("Error on errorSave: " + str(e))
    else:
        try:
            with open(where_to_save + "Error Report UB.txt", 'a') as error_file:
                error_file.write("--"*50 + "\n")
                error_file.write("On Running Backup: " + root_directory + "\n")
                error_file.write("Created On: " + date_error + "\n")
                error_file.write("Report: \n")
                for eachError in error_report:
                    error_file.write("     > " + eachError + " " + error_report[eachError] + "\n")
                error_file.write("This is an automated report generated by " + str(software_name) + " " + str(ver_control) + " " + "Author: " + str(creator) + "\n")
                error_file.write("--"*50 + "\n")
                error_file.close()
        except:
            print("Error even creating the error log .txt at: " + where_to_save + "Error Report UB.txt")
            print("Error Report: " + str(error_report))
            print("Error on errorSave: " + str(e))
    return


def step1():
    os.system('cls')
    print("\n  ------------------------------------Project Ultra backup---------------------------------\n")
    print("  -----------------------------------PC Auto Backup Configure------------------------------\n")
    print("        STEP: 1 INTRODUCTION\n")
    print("   --You are requested to enter the folder you want to backup in the format: ")
    print("   .. F:\\Output, which backup the whole 'Output' folder. You can enter multiple")
    print("   .. Folder to backup at once, after completing the process, enter 'exit', to exit")
    print("   .. from the process. Next you will be asked to enter the location where to backup")
    print("   .. for this you want ot plug in the external device like a HDD/SSD, and enter the")
    print("   .. location as the same way.")
    print("   --Remember do not backup system files.")
    print("   --Make sure that the location to backup has enough space to accomodate the gradual updates")
    print("   .. made by the Auto Backup.")
    print("   --If in case the storage becomes ful, then use the PC Backup Tool/Migrate My Backup Location.")
    print("   .. then reconfigure the Auto Backup process, to this new location.")
    input("   --After reading this, press enter.")


def step2():
    folder_backup = {}
    count = 0
    loop = 'notexit'
    os.system('cls')
    print("\n  ------------------------------------Project Ultra backup---------------------------------\n")
    print("  ------------------------------------PC Auto Backup Configure-----------------------------\n")
    print("        STEP: 2 SELECT BACKUP FOLDER\n")
    print("   --Enter the folder to backup, when complete enter 'exit' to complete the process.\n")
    print("Selected Locations: ")
    while loop!='exit':
        for each in folder_backup:
            print("   -" + folder_backup[each])
        print("\n")
        temp = input("Backup location: ")
        if temp=='exit':
            loop = 'exit'
        elif temp.find("\\")!=-1:
            temp = temp.replace("\\", "//")
        if os.path.isdir(temp)==False:
            print("Error: The folder you entered is Invalid.")
        else:
            folder_backup[count] = temp
            count += 1
    os.system('cls')
    print("\n  ------------------------------------Project Ultra backup---------------------------------\n")
    print("  ------------------------------------PC Auto Backup Configure-----------------------------\n")
    print("        STEP: 2 SELECT BACKUP FOLDER\n")
    print("   --Selected folders are: \n")
    for eachh in folder_backup:
        print("     >> " + folder_backup[eachh])
    saveOrNot = input("\n   --Do you want to save the locations[y/n]: ")
    if saveOrNot=='y':
        input("   Press enter to go to next Step.")
        return folder_backup
    elif saveOrNot=='n':
        print("   --Folder selected discarded. Try the process again.\n")
        doItAgain = input("   --Do you want redo the process again[y/n]: ")
        if doItAgain=='y':
            return ''
        elif doItAgain=='n':
            return 'exit'


def step3():
    locationBackup = ''
    location = False
    os.system('cls')
    print("\n  ------------------------------------Project Ultra backup---------------------------------\n")
    print("  ------------------------------------PC Auto Backup Configure-----------------------------\n")
    print("        STEP: 3a SELECT WHERE TO BACKUP\n")
    print("   --Enter the location where you want to backup.")
    print("   --If it is you HDD/SSD, please connect it to PC and then Proceed.\n")
    print("   --If you want to exit type 'exit' and press enter.\n")
    while location==False:
        locationBackup = input("\n   Enter the location: ")
        if locationBackup=='exit':
            print("\n   User aborted the process.")
            return 'exit'
        elif locationBackup.find("\\")!=-1:
            locationBackup = locationBackup.replace("\\", "//")
        if os.path.isdir(locationBackup)==False:
            print("   Selected folder in Invalid...")
            location = False
        else:
            doYouSave = input("\n   Do you want to save the location [y/n]: ")
            if doYouSave=='y':
                input("   Location Saved Press enter to continue.")
                location = True
                return locationBackup


def step3b():
    loc = True
    os.system('cls')
    print("\n  ------------------------------------Project Ultra backup---------------------------------\n")
    print("  ------------------------------------PC Auto Backup Configure-----------------------------\n")
    print("        STEP: 3b SELECT UBMAP AND WORKIND DIRECTORY\n")
    print("   --Enter the location of the UBMap folder.")
    print("   --Also enter the location of the Working directory.")
    while loc==True:
        ubmap = input("   --UBMap folder: ")
        workingDir = input("   --Working Directory: ")
        if ubmap.find("\\")!=-1:
            ubmap = ubmap.replace("\\", "//")
        if workingDir.find("\\")!=-1:
            workingDir = workingDir.replace("\\", "//")
        if os.path.isdir(ubmap)==False or os.path.isdir(workingDir)==False:
            print("   --Selected path is invalid, please choose a valid path")
        else:
            doyou = input("   --Do you want to save the location[y/n]: ")
            if doyou=='y':
                print("   --Location saved")
                return ubmap, workingDir


def step4(backupFolder, whereTo, ubmap, workingDir, simCry):
    errorReport = {}
    decryData = {}
    os.system('cls')
    print("\n  ------------------------------------Project Ultra backup---------------------------------\n")
    print("  ------------------------------------PC Auto Backup Configure-----------------------------\n")
    print("        STEP: 4 FINISH\n")
    print("   --You entered the following configration: \n")
    print("   --Selected folder to Backup: \n")
    for each in backupFolder:
        print("   [" + str(each) + "]." + backupFolder[each])
    print("\n")
    print("   --Location where to Backup:  " + whereTo + "\n")
    print("   --UBMap Folder: " + ubmap)
    print("   --Working Directory: " + workingDir)
    print("   --Type of Backup: " + simCry)
    doYou = input("   --Do you want to save the settings[y/n]: ")
    if doYou=='y':
        print("\n   --Name you configration.(exclude these charactor: \\, /, :, *, >, <, |")
        name = input("   --Name: ")
        doActivate = input("\n   --Do you wish to activate the Backup[y/n]: ")
        if os.path.isfile(whereTo + "//" + "UB_" + str(name) + "autoFile.pab")==False:
            try:
                with open(whereTo + "//" + "UB_" + str(name) + ".pab", 'w') as pab:   #Not this file for Auto Backup
                    pab.write("This is a ULTRA BACKUP PC Auto Backup File")
                    pab.close()
            except Exception as e:
                print("   --Sorry the Location to backup is Read Only.")
                print("   --Select a different folder, exiting.")
                errorReport["er_create_pab"] = whereTo + "//" + "UB_" + str(name) + ".pab"
                errorReport["Exception: "] = str(e)
                errorSave("C://temp", errorReport, whereTo)
                return 'exit'
            print("\n   --You will see a new file: " + whereTo + "//" + "UB_" + str(name) + "autoFile.pab" + " in the")
            print("   ..location to backup, do not worry this is a system file for the Ultra backup")
            print("   ..do not delete this file, as it may result in stop working of Auto Backup\n")
        if os.path.isfile("C://ProgramData//Ultra Backup//UserAccount.iUB")==True:
            with open("C://ProgramData//Ultra Backup//UserAccount.iUB", 'rb') as filess:
                readData = filess.read()
                filess.close()
            decryData = json.loads(fn("CB9rESpkfeU_IPqgOQlR2MKjVIq3jWg3orr-H4XZRwE=".encode()).decrypt(readData))
            decryData["PCAutoConfig-" + name] = {}
            decryData["PCAutoConfig-" + name]['folder'] = backupFolder
            #decryData["PCAutoConfig-" + name]['location'] = whereTo  old # version v1.0.0
            decryData["PCAutoConfig-" + name]['location'] = whereTo[1:] #updated v1.1.0 autobackup drive bug corrected
            decryData["PCAutoConfig-" + name]['activation'] = doActivate
            #decryData["PCAutoConfig-" + name]['ubmap'] = ubmap # old version v1.0.0
            decryData["PCAutoConfig-" + name]['ubmap'] = ubmap[1:] #updated v1.1.0 autobackup drive bug corrected
            decryData["PCAutoConfig-" + name]['workingDir'] = workingDir
            decryData["PCAutoConfig-" + name]['simCry'] = simCry
            writeEncry = fn("CB9rESpkfeU_IPqgOQlR2MKjVIq3jWg3orr-H4XZRwE=".encode()).encrypt(json.dumps(decryData).encode())
            with open("C://ProgramData//Ultra Backup//UserAccount.iUB", 'wb') as writeFile:
                writeFile.write(writeEncry)
                writeFile.close()
                print("   --Configration saved successfully")
                return 'success'
    else:
        print("   --Enter a valid option, user terminated")
        return 'exit'
        

def step3c():
    xx = True
    os.system('cls')
    print("\n  ------------------------------------Project Ultra backup---------------------------------\n")
    print("  ------------------------------------PC Auto Backup Configure-----------------------------\n")
    print("        STEP: 3c SIMPLE OR CRYPTIC BACKUP\n")
    print("   --Select weather you want a Simple or a Cryptic Backup solution.")
    print("   --If Simple Backup enter: 's'")
    print("   --If Cryptic Backup enter: 'c'")
    while xx==True:
        simCry = input("   --Enter the option: ")
        doYouSave = input("   --Do you want to save the settings[y/n]: ")
        if doYouSave=='y':
            print("   --Settings saved")
            return simCry
        else:
            print("   --Enter a valid option")


def autoConfig():
    folders = {}
    locationBackup = ''
    errorReport = {}
    os.system('cls')
    print("\n   --Welcome to PC Auto configure wizard, you will be walked throw a couple of steps")
    print("   .. to configure your Automated Backup.")
    input("\nPress Enter to continue: ")
    step1()
    while len(folders)==0:
        try:
            folders = step2()
        except Exception as e:
            errorReport["er_step2"] = 'step2 + ' + str(folders)
            errorReport["Exception: "] = str(e)
            errorSave("C://temp", errorReport, 'step2')
            return 'error'
        if folders=='exit':
            return 'No folder Selected'
    while len(locationBackup)==0:
        try:
            locationBackup  = step3()
        except Exception as e:
            errorReport["er_step3"] = 'step3 + ' + str(folders)
            errorReport["Exception: "] = str(e)
            errorSave("C://temp", errorReport, 'step3')
            return 'error'
        if locationBackup=='exit':
            return 'No folder Selected'
    try:
        ubmap, workingDir = step3b()
    except Exception as e:
        errorReport["er_step3b"] = 'step3b'
        errorReport["Exception: "] = str(e)
        errorSave("C://temp", errorReport, 'step3b')
        return 'No folder Selected'
    try:
        siOrCrypt = step3c()
    except Exception as e:
        errorReport["er_step3c"] = 'step3c'
        errorReport["Exception: "] = str(e)
        errorSave("C://temp", errorReport, 'step3c')
        return 'No folder Selected'
    try:
        status = step4(folders, locationBackup, ubmap, workingDir, siOrCrypt)
    except Exception as e:
        errorReport["er_step4"] = 'step4 + ' + str(folders)
        errorReport["Exception: "] = str(e)
        errorSave("C://temp", errorReport, 'step4')
        return 'error'
    if status == 'exit':
        return 'user abort'
    elif status=='success':
        return 'success'
    

def newPCAutoConfig():
    errorReport = {}
    if os.path.isdir("C://temp")==False:
        os.makedirs("C://temp")
    if os.path.isfile("C://ProgramData//Ultra Backup//UserAccount.iUB")==True:
        try:
            statur = autoConfig()
        except Exception as e:
            print("Error occured....")
            errorReport["er_autoConfig"] = 'autoconfig'
            errorReport["Exception: "] = str(e)
            errorSave("C://temp", errorReport, 'autoConfig')
            input("   Press enter to continue")
            return
        if statur=="No folder Selected" or statur=='user abort':
            print("\n   --Dont worry you can always try again")
            input("Press enter to continue: ")
            return
        elif statur=='error':
            input("   Press enter to continue")
            return
        elif statur=='success':
            input("   --Press enter to move to PC Auto Backup Menu")
            return


if __name__=="__main__":
    print("Checked Ok")
    print("Try importing the file, this is a part of Project Ultra Backup.")